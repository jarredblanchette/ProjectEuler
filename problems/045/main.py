# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
#
# Triangle:
# T_n = n(n+1)/2
# 1, 3, 6, 10, 15, ...
#
# Pentagonal
# P_n = n(3n - 1)/2
# 1, 5, 12, 22, 35, ...
#
# Hexagonal
# H_n = n(2n - 1)
# 1, 6, 15, 28, 45, ...
#
# It can be verified that T_{285} = P_{165} = H_{143} = 40755.
#
# Find the next triangle number that is also pentagonal and hexagonal.

class NGonal:
    def __init__(self, generator_function):
        self.iter_start_index = 0
        self.values = [1]
        self.generatorFunction = generator_function

    def __getitem__(self, item):
        while item > len(self.values):
            self.add_next()
        return self.values[item-1]

    def __contains__(self, item):
        while item > self.values[-1]:
            self.add_next()
        return item in self.values

    def __iter__(self):
        self.iter_index = self.iter_start_index
        self.iter_start_index = 0
        self.fill_to(self.iter_index)
        return self

    def __next__(self):
        v = self[self.iter_index]
        self.iter_index += 1
        return v

    def add_value(self, p_n):
        self.values.append(p_n)

    def set_iter_start(self,n):
        """Overrides the starting index of the iterator.  Sets the next iterator generated to start from n, rather than 0."""
        self.iter_start_index = n

    def add_next(self):
        """calculate and insert the next pentagonal value"""
        n = len(self.values) + 1
        p_n = self.generatorFunction(n)
        self.add_value(p_n)

    def index_of(self, value):
        if value not in self:
            return -1
        return self.values.index(value)

    def fill_to(self, k):
        """Helper function, expands our tracked values to ensure that int k is less than our largest value"""
        while len(self.values) <= k:
            self.add_next()
        return self[k]


if __name__ == '__main__':
    triangles = NGonal(lambda n: int(n * (n + 1) / 2))
    pentagons = NGonal(lambda n: int(n * (3 * n - 1) / 2))
    hexagons = NGonal(lambda n: n * (2 * n - 1))

    hexagons.set_iter_start(144)
    for hexagon in hexagons:
        if hexagon in triangles and hexagon in pentagons:
            print(hexagon)
            break
